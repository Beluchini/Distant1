@page "/signup"
@attribute [StreamRendering]
@using Newtonsoft.Json
@rendermode InteractiveServer
@using Distante.functions
<PageTitle>SignUp</PageTitle>
<body class="dack"></body>

<div class="view">
    <a style="text-decoration: none" href="https://localhost:44312/Client">
        <div class="clie">
            Клиенты
        </div>
    </a>
    <a style="text-decoration: none" href="https://localhost:44312/">
        <div class="note">
            Услуги
        </div>
    </a>
</div>
<div class="view">
    <div class="">
        <div class="front">
            <div class="add">
                <div style="padding-top: 5px" class="serice">Выберите услугу</div>
                <select class="serice" @bind="_NewService">
                    @foreach (var item in list)
                    {
                    <option>
                        @item
                    </option>
                    }
                </select>
            </div>
            <div style="margin-top: 50px">
                <div style="padding-top: 5px" class="serice">Выберите клиента</div>
                <select class="serice" @bind="_NewClient">
                    @foreach (var item in List)
                    {
                    <option>
                        @item
                    </option>
                    }
                </select>
            </div>
            <div style="margin-top: 50px">
                <div style="padding-top: 5px" class="serice">Введите дату</div>
                <input style="border: 1px solid white" class="serice" type="date" @bind="_NewDate"/>
            </div>
            <div style="margin-top: 50px" class="parent">
                <button style="border: 1px solid white" class="serice" @onclick="AddFile">Добавить</button>
                <button style="border: 1px solid white" class="serice" @onclick="SaveFile">Сохранить</button>
            </div>
        </div>
        
    </div>

</div>


<div>
    <div class="body">
        <div class="wiev">
            @foreach (var item in last)
            {
                <div class="parent">
                    <div class="caps">
                        <div class="tex">
                            <div>@item.NewService</div>
                            <div>@item.NewClient</div>
                            <div>@item.NewDate</div>
                        </div>
                        <button class="del" @onclick="() => Remove(item)">Удалить</button>
                    </div>
                    </div>
            }
        </div>
    </div>
</div>
@code {
    public string _NewService { get; set; }
    public string _NewClient { get; set; }
    public DateOnly _NewDate { get; set; }
    public IList<string> list = new List<string>();
    public IList<string> List = new List<string>();
    public IList<UnSon> last = new List<UnSon>();
    
    protected override void OnInitialized()
    {
        OpenFile();
    }

    public void OpenFile()
    {
        if (File.Exists("servic.json"))
        {
            string json = File.ReadAllText(path: "servic.json");
            string _json = File.ReadAllText(path: "client.json");
            string jsom = File.ReadAllText(path: "union.json");
            list = JsonConvert.DeserializeObject<List<string>>(json);
            List = JsonConvert.DeserializeObject<List<string>>(_json);
            last = JsonConvert.DeserializeObject<List<UnSon>>(jsom);
        }
        else
        {
            SaveFile();
        }
    }

    public void SaveFile()
    {
        var json = JsonConvert.SerializeObject(list);
        var _json = JsonConvert.SerializeObject(List);
        var jsom = JsonConvert.SerializeObject(last);
        File.WriteAllText("servic.json", json);
        File.WriteAllText("client.json", _json);
        File.WriteAllText("union.json", jsom);
    }
    
    private void Remove(UnSon item)
    {
        last.Remove(item);
        SaveFile();
    }
    private void AddFile()
    {
        var task = new UnSon(_NewService, _NewClient, _NewDate);
        last.Add(task);
        _NewService = string.Empty;
        _NewClient = string.Empty;
        _NewDate = DateOnly.MinValue;
        SaveFile();
    }
}